<!--
  name: build.xml
  description: The main project build file for phing operations. This file can
               be overridden with project specific configuration.
-->

<project name="govcms" default="build" phingVersion="2.8.2">

    <!-- Additional task classes -->
    <includepath classpath="${project.basedir}/phingcludes"/>
    <taskdef name="behat" classname="phingcludes.BehatTask"/>
    <taskdef name="drush" classname="phingcludes.DrushTask"/>

    <!--               -->
    <!--  Properties   -->
    <!-- ============= -->

    <!-- Application -->
    <property name="repo.root" value="${project.basedir}/../.."/>
    <property name="docroot" value="${repo.root}/docroot" override="true"/>
    <property name="src.custom.modules" value="${repo.root}/modules"
              override="true"/>
    <property name="src.custom.themes" value="${repo.root}themes"
              override="true"/>
    <property name="site.name" value="govCMS"/>
    <property name="site.mail" value="root@[127.0.0.1]"/>
    <property name="drupal.profile" value="govcms" override="true"/>
    <property name="drupal.makefile"
              value="${repo.root}/build-${phing.project.name}.make"
              override="true"/>
    <property name="drupal.contrib_makefile"
              value="${repo.root}/drupal-org.make"
              override="true"/>
    <property name="drupal.base_url" value="http://localhost/"/>

    <!-- Credentials -->
    <property name="db.username" value="root"/>
    <property name="db.password" value=""/>
    <property name="db.name" value="travis_ci_govcms_drupal"/>
    <property name="db.host" value="localhost"/>
    <property name="account.name" value="admin"/>
    <property name="account.password" value="password"/>
    <property name="account.mail" value="root@[127.0.0.1]"/>

    <!-- Drush, Composer & Behat -->
    <property name="composer.bin" value="${repo.root}/build/bin"/>
    <property name="drush.bin" value="${composer.bin}/drush" override="true"/>
    <property name="drush.root" value="${docroot}"/>
    <property name="drush.source" value="@${phing.project.name}.dev"
              override="true"/>
    <property name="drush.file"
              value="${phing.project.name}.aliases.drushrc.php"
              override="true"/>
    <property name="behat.config"
              value="${repo.root}/build/tests/behat/behat.yml"/>
    <property name="behat.local"
              value="${repo.root}/build/tests/behat/behat.local.yml"/>

    <!-- We override this so Drupal install works -->
    <property name="drush.cmd" value="${drush.bin} -r ${docroot}"
              override="true"/>

    <!-- The following allows local overrides. -->
    <property file="${project.basedir}/build.properties" override="true"/>

    <!--               -->
    <!-- Filesets      -->
    <!-- ============= -->
    <!-- @TODO uncomment these inclusions when errors have been fixed. -->
    <fileset dir="${docroot}" id="custom.files" expandsymboliclinks="true">
        <!--    <include name="profiles/govcms/modules/custom/**" />-->
        <!--    <include name="profiles/govcms/modules/features/**" />-->
        <include name="sites/all/modules/**"/>
    </fileset>

    <!--               -->
    <!-- Targets       -->
    <!-- ============= -->

    <target name="build"
            description="Build the project and install govCMS from the remote repo."
            depends="clean, make, install"/>

    <target name="build:no-clean"
            description="Build the project and install govCMS, observing local development changes."
            depends="make:development, install"/>

    <target name="build:with-validation"
            description="Build the project, install, then run code validation."
            depends="clean, make, install, validate:all"/>

    <target name="build:with-tests"
            description="Build the project, install, then run tests."
            depends="clean, make, install, test:all"/>

    <target name="build:full"
            description="Build the project, install govCMS, run validation and tests."
            depends="clean, make, install, run-tests"/>

    <target name="build:full:no-clean"
            description="Build the project without removing local changes, install govCMS, run validation and tests."
            depends="make:development, install, run-tests"/>

    <target name="run-tests" description="Runs code validation and tests on an installed govCMS codebase."
            depends="validate:all, test:all"/>

    <target name="validate:all" description="Runs code validation on govCMS."
            depends="validate:lint, validate:phpcs, validate:phpmd, validate:makefile"/>

    <target name="test:all" description="Runs all tests against govCMS."
            depends="test:security-updates, test:behat"/>

    <target name="clean"
            description="Cleanup build artifacts">
        <exec command="git reset --hard"
              logoutput="true"
              passthru="true" />
        <exec command="git clean -fd"
              logoutput="true"
              passthru="true"/>
        <if>
            <available property="docroot.exists" file="${docroot}" type="dir"/>
            <then>
                <if>
                    <available property="docroot.sites.exists" file="${docroot}/sites/default" type="dir"/>
                    <then>
                        <chmod file="${docroot}/sites/default" mode="2775"/>
                    </then>
                </if>
                <delete dir="${docroot}"/>
            </then>
        </if>
    </target>

    <!-- Drush make the build -->
    <target name="make"
            description="Run drush make">

        <drush command="make" assume="yes" verbose="TRUE">
            <option name="concurrency">8</option>
            <param>"${drupal.makefile}"</param>
            <param>"${docroot}"</param>
        </drush>

        <!-- Run Acquia specific build tasks -->
        <import file="${repo.root}/build/acsf/phing/acsf_post_make.build.xml" optional="true" />
    </target>

    <!-- Use the local make files rather than checking out from the repository -->
    <target name="make:development"
            description="Run drush make in a development context">

        <drush command="make" assume="yes" verbose="TRUE">
            <option name="concurrency">8</option>
            <option name="no-recursion" />
            <param>"${drupal.makefile}"</param>
            <param>"${docroot}"</param>
        </drush>

        <drush command="make" assume="yes" verbose="TRUE">
            <option name="concurrency">8</option>
            <option name="no-recursion" />
            <option name="no-core" />
            <option name="contrib-destination">profiles/${drupal.profile}</option>
            <param>"${drupal.contrib_makefile}"</param>
            <param>"${docroot}"</param>
        </drush>

        <!-- Run Acquia specific build tasks -->
        <import file="${repo.root}/build/acsf/phing/acsf_post_make.build.xml" optional="true" />
    </target>

    <!-- @TODO Remove the exceptions when we incorporate the patches in -->
    <!-- previousnext/agov#382 and previousnext/agov#385 -->
    <target name="validate:lint" description="Runs a php lint against the codebase.">
        <phplint>
            <fileset dir="${docroot}">
                <include name="**/*.inc"/>
                <include name="**/*.php"/>
                <include name="**/*.module"/>
                <include name="**/*.install"/>
                <include name="**/*.profile"/>
                <include name="**/*.test"/>
                <include name="**/*.theme"/>
                <exclude name="profiles/govcms/modules/contrib/uuid/uuid.api.php"/>
                <exclude name="profiles/govcms/modules/contrib/webform_clear/webform_clear.test"/>
            </fileset>
        </phplint>
    </target>

    <target name="validate:phpcs"
            description="Sniffs custom code to ensure it meets standards.">

        <phpcodesniffer
                standard="${repo.root}/build/vendor/drupal/coder/coder_sniffer/Drupal/"
                showSniffs="true"
                showWarnings="true"
                haltonerror="true"
                haltonwarning="true">
            <fileset refid="custom.files"/>
            <formatter type="full" usefile="false"/>
        </phpcodesniffer>
    </target>

    <!-- Run code complexity and cleanliness checks on custom code. -->
    <target name="validate:phpmd" description="Checks custom code for complexity.">
        <phpmd rulesets="codesize,unusedcode,cleancode">
            <fileset refid="custom.files"/>
            <formatter type="text" outfile="false" usefile="false"/>
        </phpmd>
    </target>

    <!-- Ensure the Drush make files will compile on Drupal.org. -->
    <target name="validate:makefile"
            description="Ensures Drush make will run."
            depends="prepare:drupalorg-drush">

        <!-- @TODO implement this upon deployment to d.o -->
        <!-- <drush command="verify-makefile" assume="yes" verbose="TRUE">
            <param>"${drupal.makefile}"</param>
        </drush> -->
    </target>

    <target name="prepare:drupalorg-drush">
        <drush command="pm-download" assume="yes" verbose="TRUE">
            <option name="destination">"${user.home}/.drush"</option>
            <option name="default-major">"7"</option>
            <option name="dev" />
            <param>"drupalorg_drush"</param>
        </drush>
    </target>

    <!-- Install govCMS. -->
    <target name="install"
            description="Installs Drupal using the govCMS profile">

        <drush command="site-install" assume="yes" verbose="TRUE">
            <option name="db-url">"mysql://${db.username}:${db.password}@${db.host}/${db.name}"</option>
            <option name="site-name">"${site.name}"</option>
            <option name="site-mail">"${site.mail}"</option>
            <option name="account-name">"${account.name}"</option>
            <option name="account-mail">"${account.mail}"</option>
            <param>"${drupal.profile}"</param>
        </drush>

        <!-- Run Acquia Cloud Site Factory specific post install tasks. -->
        <import file="${repo.root}/build/acsf/phing/acsf_post_install.build.xml" optional="true" />
    </target>

    <!-- Ensure govCMS doesn't have any modules requiring security updates. -->
    <target name="test:security-updates"
            description="Checks an installed site for security updates on modules">
        <exec dir="${docroot}"
              command="! ${drush.bin} -n ups --check-disabled --security-only 2>/dev/null | grep 'SECURITY UPDATE'"
              logoutput="true"
              checkreturn="true"
              passthru="true"/>
    </target>

    <target name="test:behat" description="Behat testing for govCMS">
        <!-- If behat.local.yml doesn't exist, behat will be a sad panda so create a stub to appease it. -->
        <if>
            <not>
                <available file="${behat.local}" property="behat_local_exists" value="exists"/>
            </not>
            <then>
                <echo message="# Local behat settings." file="${behat.local}"
                      append="false"/>
            </then>
        </if>

        <!-- Run behat. Any settings in behat.yml or behat.local.yml will be used. -->
        <behat executable="${composer.bin}/behat"
               config="${behat.config}"
               verbose="true"
               strict="true"
               haltonerror="true"
               returnProperty="behatPass"/>
    </target>
</project>
