<!--
  name: build.xml
  description: The main project build file for phing operations. This file can
               be overridden with project specific configuration.
-->

<project name="govcms" default="build" phingVersion="2.8.2">

    <!-- Additional task classes -->
    <includepath classpath="${project.basedir}"/>
    <taskdef name="behat" classname="BehatTask"/>
    <taskdef name="drush" classname="DrushTask"/>

    <!--               -->
    <!--  Properties   -->
    <!-- ============= -->

    <!-- Application -->
    <property name="repo.root" value="${project.basedir}/../.."/>
    <property name="docroot" value="${repo.root}/docroot" override="true"/>
    <property name="src.custom.modules" value="${repo.root}/modules"
              override="true"/>
    <property name="src.custom.themes" value="${repo.root}themes"
              override="true"/>
    <property name="site.name" value="govCMS"/>
    <property name="site.mail" value="root@[127.0.0.1]"/>
    <property name="drupal.profile" value="govcms" override="true"/>
    <property name="drupal.makefile"
              value="${repo.root}/build-${phing.project.name}.make"
              override="true"/>
    <property name="drupal.base_url" value="http://localhost/"/>

    <!-- Credentials -->
    <property name="db.username" value="root"/>
    <property name="db.password" value=""/>
    <property name="db.name" value="travis_ci_govcms_drupal"/>
    <property name="db.host" value="localhost"/>
    <property name="account.name" value="admin"/>
    <property name="account.password" value="password"/>
    <property name="account.mail" value="root@[127.0.0.1]"/>

    <!-- Drush, Composer & Behat -->
    <property name="composer.bin" value="${repo.root}/build/bin"/>
    <property name="drush.bin" value="${composer.bin}/drush" override="true"/>
    <property name="drush.root" value="${docroot}"/>
    <property name="drush.source" value="@${phing.project.name}.dev"
              override="true"/>
    <property name="drush.file"
              value="${phing.project.name}.aliases.drushrc.php"
              override="true"/>
    <property name="behat.config"
              value="${repo.root}/build/tests/behat/behat.yml"/>
    <property name="behat.local"
              value="${repo.root}/build/tests/behat/behat.local.yml"/>

    <!-- We override this so Drupal install works -->
    <property name="drush.cmd" value="${drush.bin} -r ${docroot}"
              override="true"/>

    <!-- The following allows local overrides. -->
    <property file="${project.basedir}/build.properties" override="true"/>

    <!--               -->
    <!-- Basic targets -->
    <!-- ============= -->

    <target name="build"
            description="Build the project."
            depends="clean, make, lint, phpcs, phpmd"/>

    <target name="clean"
            description="Cleanup build artifacts">
        <!--exec command="git reset - -hard"
              logoutput="true"
              passthru="true" /-->
        <exec command="git clean -fd"
              logoutput="true"
              passthru="true"/>
        <if>
            <available file="${docroot}" type="dir"/>
            <then>
                <if>
                    <available file="${docroot}/sites/default" type="dir"/>
                    <then>
                        <chmod file="${docroot}/sites/default" mode="2775"/>
                    </then>
                </if>
                <delete dir="${docroot}"/>
            </then>
        </if>
    </target>

    <!--                -->
    <!-- Custom targets -->
    <!-- ============== -->

    <!-- Drush make the build -->
    <target name="make"
            description="Run drush make">

        <exec dir="${repo.root}" executable="${composer.bin}/drush"
              logoutput="true" checkreturn="true" passthru="true"
              taskname="drush">
            <arg value="make"/>
            <arg value="-y"/>
            <arg value="--concurrency=8"/>
            <arg value="${drupal.makefile}"/>
            <arg value="${docroot}"/>
        </exec>

        <!-- Run Acquia specific build tasks -->
        <import file="${repo.root}/build/acsf/phing/acsf_post_make.build.xml"
                optional="true"/>
    </target>

    <target name="lint" description="Runs a php lint against the codebase.">
        <exec executable="bash" checkreturn="true" taskname="lint"
              passthru="true">
            <arg value="-c"/>
            <!-- @TODO Remove the exceptions when we move to the next tagged release
            of govCMS that fixes previousnext/govcms#382 and previousnext/govcms#385 -->
            <arg value="find ${docroot} -type f \( -name '*.inc' -o -name '*.install' -o -name '*.module' -o -name '*.php' -o -name '*.profile' -o -name '*.test' -o -name '*.theme' \) ! -path '*profiles/govcms/modules/contrib/uuid/uuid.api.php' ! -path '*profiles/govcms/modules/contrib/webform_clear/webform_clear.test' | xargs -P8 -n 1 php -l"/>
        </exec>
    </target>


    <!-- @TODO Remove the exceptions when we incorporate the patches in -->
    <!-- previousnext/agov#382 and previousnext/agov#385 -->
    <target name="lint" description="Runs a php lint against the codebase.">
        <phplint>
            <fileset dir="${docroot}">
                <include name="**/*.inc"/>
                <include name="**/*.php"/>
                <include name="**/*.module"/>
                <include name="**/*.install"/>
                <include name="**/*.profile"/>
                <include name="**/*.test"/>
                <include name="**/*.theme"/>
                <exclude
                        name="profiles/agov/modules/contrib/uuid/uuid.api.php"/>
                <exclude
                        name="profiles/agov/modules/contrib/webform_clear/webform_clear.test"/>
            </fileset>
        </phplint>
    </target>

    <!-- @TODO uncomment these inclusions when errors have been fixed. -->
    <fileset dir="${docroot}" id="custom.files" expandsymboliclinks="true">
        <!--    <include name="profiles/agov/modules/custom/**" />-->
        <!--    <include name="profiles/agov/modules/features/**" />-->
        <include name="sites/all/modules/custom/**"/>
    </fileset>

    <target name="phpcs"
            description="Sniffs custom code to ensure it meets standards.">

        <phpcodesniffer
                standard="${repo.root}/build/vendor/drupal/coder/coder_sniffer/Drupal/"
                showSniffs="true"
                showWarnings="true"
                haltonerror="true"
                haltonwarning="true">
            <fileset refid="custom.files"/>
            <formatter type="full" usefile="false"/>
        </phpcodesniffer>
    </target>

    <!-- Run code complexity and cleanliness checks on custom code. -->
    <target name="phpmd" description="Checks custom code for complexity.">
        <phpmd rulesets="codesize,unusedcode,cleancode">
            <fileset refid="custom.files"/>
            <formatter type="text" usefile="false"/>
        </phpmd>
    </target>

    <target name="install"
            description="Installs govCMS and any ACSF dependencies."
            depends="acsf, site-install"/>
    <target name="run-tests" description="Runs tests on an installed codebase."
            depends="install, security-check, behat"/>

    <!-- Run the acsf-init command to set the docroot up as Site Factory -->
    <!-- would be. -->
    <target name="acsf" description="Runs ACSF specific steps">
        <drush command="acsf-init" assume="yes">
            <option name="include">"${docroot}/profiles/govcms/modules/contrib/acsf/acsf_init"</option>
        </drush>
    </target>

    <!-- Install govCMS. -->
    <target name="site-install"
            description="Installs Drupal using the govCMS profile">

        <drush command="site-install" assume="yes" verbose="TRUE">
            <option name="db-url">"mysql://${db.username}:${db.password}@${db.host}/${db.name}"</option>
            <option name="site-name">"${site.name}"</option>
            <option name="site-mail">"${site.mail}"</option>
            <option name="account-name">"${account.name}"</option>
            <option name="account-mail">"${account.mail}"</option>
            <param>"${drupal.profile}"</param>
        </drush>
    </target>

    <!-- Ensure govCMS doesn't have any modules requiring security updates. -->
    <target name="security-check"
            description="Checks an installed site for security updates on modules">
        <exec dir="${docroot}"
              command="! ${drush.bin} -n ups --check-disabled --security-only 2>/dev/null | grep 'SECURITY UPDATE'"
              logoutput="true"
              checkreturn="true"
              passthru="true"/>
    </target>

    <target name="behat" description="Behat testing for govCMS">
        <!-- Check to see if behat.local.yml exists already. -->
        <available file="${behat.local}" property="behat_local_exists"
                   value="exists"/>
        <if>
            <not>
                <equals arg1="${behat_local_exists}" arg2="exists"/>
            </not>
            <then>
                <!-- If behat.local.yml doesn't exist, behat will be a sad panda so create a stub to appease it. -->
                <echo message="# Local behat settings." file="${behat.local}"
                      append="false"/>
            </then>
        </if>
        <!-- Run behat. Any settings in behat.yml or behat.local.yml will be used. -->
        <behat executable="${project.basedir}/bin/behat"
               verbose="true"
               strict="true"
               haltonerror="true"
               returnProperty="behatPass"/>
    </target>
</project>
